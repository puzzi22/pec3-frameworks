{"ast":null,"code":"import { NONE_TYPE } from '@angular/compiler';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/Shared/Services/shared.service\";\nexport class PostService {\n  constructor(http, sharedService) {\n    this.http = http;\n    this.sharedService = sharedService;\n    this.controller = 'posts';\n    this.urlBlogUocApi = 'http://localhost:3000/' + this.controller;\n  }\n  getPosts() {\n    return this.http.get(this.urlBlogUocApi).pipe(catchError(this.sharedService.handleError));\n  }\n  getPostsByUserId(userId) {\n    return this.http.get('http://localhost:3000/users/posts/' + userId).pipe(catchError(this.sharedService.handleError));\n  }\n  createPost(post) {\n    return this.http.post(this.urlBlogUocApi, post).pipe(catchError(this.sharedService.handleError));\n  }\n  getPostById(postId) {\n    return this.http.get(this.urlBlogUocApi + '/' + postId).pipe(catchError(this.sharedService.handleError));\n  }\n  updatePost(postId, post) {\n    return this.http.put(this.urlBlogUocApi + '/' + postId, post).pipe(catchError(this.sharedService.handleError));\n  }\n  likePost(postId) {\n    return this.http.put(this.urlBlogUocApi + '/like/' + postId, NONE_TYPE).pipe(catchError(this.sharedService.handleError));\n  }\n  dislikePost(postId) {\n    return this.http.put(this.urlBlogUocApi + '/dislike/' + postId, NONE_TYPE).pipe(catchError(this.sharedService.handleError));\n  }\n  deletePost(postId) {\n    return this.http.delete(this.urlBlogUocApi + '/' + postId).pipe(catchError(this.sharedService.handleError));\n  }\n}\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SharedService));\n};\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["NONE_TYPE","catchError","PostService","constructor","http","sharedService","controller","urlBlogUocApi","getPosts","get","pipe","handleError","getPostsByUserId","userId","createPost","post","getPostById","postId","updatePost","put","likePost","dislikePost","deletePost","delete","i0","ɵɵinject","i1","HttpClient","i2","SharedService","factory","ɵfac","providedIn"],"sources":["/Users/pierre-antoinetremblay/Desktop/blog-uoc-project-front/src/app/Post/services/post.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { NONE_TYPE } from '@angular/compiler';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { SharedService } from 'src/app/Shared/Services/shared.service';\nimport { PostDTO } from '../models/post.dto';\n\ninterface updateResponse {\n  affected: number;\n}\n\ninterface deleteResponse {\n  affected: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostService {\n  private urlBlogUocApi: string;\n  private controller: string;\n\n  constructor(private http: HttpClient, private sharedService: SharedService) {\n    this.controller = 'posts';\n    this.urlBlogUocApi = 'http://localhost:3000/' + this.controller;\n  }\n\n  getPosts(): Observable<PostDTO[]> {\n    return this.http\n      .get<PostDTO[]>(this.urlBlogUocApi)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  getPostsByUserId(userId: string): Observable<PostDTO[]> {\n    return this.http\n      .get<PostDTO[]>('http://localhost:3000/users/posts/' + userId)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  createPost(post: PostDTO): Observable<PostDTO> {\n    return this.http\n      .post<PostDTO>(this.urlBlogUocApi, post)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  getPostById(postId: string): Observable<PostDTO> {\n    return this.http\n      .get<PostDTO>(this.urlBlogUocApi + '/' + postId)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  updatePost(postId: string, post: PostDTO): Observable<PostDTO> {\n    return this.http\n      .put<PostDTO>(this.urlBlogUocApi + '/' + postId, post)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  likePost(postId: string): Observable<updateResponse> {\n    return this.http\n      .put<updateResponse>(this.urlBlogUocApi + '/like/' + postId, NONE_TYPE)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  dislikePost(postId: string): Observable<updateResponse> {\n    return this.http\n      .put<updateResponse>(this.urlBlogUocApi + '/dislike/' + postId, NONE_TYPE)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n\n  deletePost(postId: string): Observable<deleteResponse> {\n    return this.http\n      .delete<deleteResponse>(this.urlBlogUocApi + '/' + postId)\n      .pipe(catchError(this.sharedService.handleError));\n  }\n}\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,mBAAmB;AAG7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAe3C,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,aAAa,GAAbA,aAAa;IACzD,IAAI,CAACC,UAAU,GAAG,OAAO;IACzB,IAAI,CAACC,aAAa,GAAG,wBAAwB,GAAG,IAAI,CAACD,UAAU;EACjE;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CAAY,IAAI,CAACF,aAAa,CAAC,CAClCG,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAC,gBAAgBA,CAACC,MAAc;IAC7B,OAAO,IAAI,CAACT,IAAI,CACbK,GAAG,CAAY,oCAAoC,GAAGI,MAAM,CAAC,CAC7DH,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAG,UAAUA,CAACC,IAAa;IACtB,OAAO,IAAI,CAACX,IAAI,CACbW,IAAI,CAAU,IAAI,CAACR,aAAa,EAAEQ,IAAI,CAAC,CACvCL,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAK,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACb,IAAI,CACbK,GAAG,CAAU,IAAI,CAACF,aAAa,GAAG,GAAG,GAAGU,MAAM,CAAC,CAC/CP,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAO,UAAUA,CAACD,MAAc,EAAEF,IAAa;IACtC,OAAO,IAAI,CAACX,IAAI,CACbe,GAAG,CAAU,IAAI,CAACZ,aAAa,GAAG,GAAG,GAAGU,MAAM,EAAEF,IAAI,CAAC,CACrDL,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAS,QAAQA,CAACH,MAAc;IACrB,OAAO,IAAI,CAACb,IAAI,CACbe,GAAG,CAAiB,IAAI,CAACZ,aAAa,GAAG,QAAQ,GAAGU,MAAM,EAAEjB,SAAS,CAAC,CACtEU,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAU,WAAWA,CAACJ,MAAc;IACxB,OAAO,IAAI,CAACb,IAAI,CACbe,GAAG,CAAiB,IAAI,CAACZ,aAAa,GAAG,WAAW,GAAGU,MAAM,EAAEjB,SAAS,CAAC,CACzEU,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;EAEAW,UAAUA,CAACL,MAAc;IACvB,OAAO,IAAI,CAACb,IAAI,CACbmB,MAAM,CAAiB,IAAI,CAAChB,aAAa,GAAG,GAAG,GAAGU,MAAM,CAAC,CACzDP,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,aAAa,CAACM,WAAW,CAAC,CAAC;EACrD;;AAvDWT,WAAW,C;mBAAXA,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;AAAA;AAAX3B,WAAW,C;SAAXA,WAAW;EAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}