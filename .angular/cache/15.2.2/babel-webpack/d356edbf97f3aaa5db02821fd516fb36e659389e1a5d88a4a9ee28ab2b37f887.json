{"ast":null,"code":"import _asyncToGenerator from \"/Users/pierre-antoinetremblay/Desktop/blog-uoc-project-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class SharedService {\n  constructor() {}\n  managementToast(element, validRequest, error) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const toastMsg = document.getElementById(element);\n      if (toastMsg) {\n        if (validRequest) {\n          toastMsg.className = 'show requestOk';\n          toastMsg.textContent = 'Form submitted successfully.';\n          yield _this.wait(2500);\n          toastMsg.className = toastMsg.className.replace('show', '');\n        } else {\n          toastMsg.className = 'show requestKo';\n          if (error?.messageDetail) {\n            toastMsg.textContent = 'Error on form submitted, show logs. Message: ' + error?.message + '. Message detail: ' + error?.messageDetail + '. Status code: ' + error?.statusCode;\n          } else {\n            toastMsg.textContent = 'Error on form submitted, show logs. Message: ' + error?.message + '. Status code: ' + error?.statusCode;\n          }\n          yield _this.wait(2500);\n          toastMsg.className = toastMsg.className.replace('show', '');\n        }\n      }\n    })();\n  }\n  errorLog(error) {\n    console.error('path:', error.path);\n    console.error('timestamp:', error.timestamp);\n    console.error('message:', error.message);\n    console.error('messageDetail:', error.messageDetail);\n    console.error('statusCode:', error.statusCode);\n  }\n  wait(ms) {\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    })();\n  }\n  handleError(error) {\n    return throwError(error);\n  }\n}\nSharedService.ɵfac = function SharedService_Factory(t) {\n  return new (t || SharedService)();\n};\nSharedService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SharedService,\n  factory: SharedService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","SharedService","constructor","managementToast","element","validRequest","error","_this","_asyncToGenerator","toastMsg","document","getElementById","className","textContent","wait","replace","messageDetail","message","statusCode","errorLog","console","path","timestamp","ms","Promise","resolve","setTimeout","handleError","factory","ɵfac","providedIn"],"sources":["/Users/pierre-antoinetremblay/Desktop/blog-uoc-project-front/src/app/Shared/Services/shared.service.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\n\nexport interface ResponseError {\n  statusCode: number;\n  message: string;\n  messageDetail: string;\n  code: string;\n  timestamp: string;\n  path: string;\n  method: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SharedService {\n  constructor() {}\n\n  async managementToast(\n    element: string,\n    validRequest: boolean,\n    error?: ResponseError\n  ): Promise<void> {\n    const toastMsg = document.getElementById(element);\n    if (toastMsg) {\n      if (validRequest) {\n        toastMsg.className = 'show requestOk';\n        toastMsg.textContent = 'Form submitted successfully.';\n        await this.wait(2500);\n        toastMsg.className = toastMsg.className.replace('show', '');\n      } else {\n        toastMsg.className = 'show requestKo';\n        if (error?.messageDetail) {\n          toastMsg.textContent =\n            'Error on form submitted, show logs. Message: ' +\n            error?.message +\n            '. Message detail: ' +\n            error?.messageDetail +\n            '. Status code: ' +\n            error?.statusCode;\n        } else {\n          toastMsg.textContent =\n            'Error on form submitted, show logs. Message: ' +\n            error?.message +\n            '. Status code: ' +\n            error?.statusCode;\n        }\n\n        await this.wait(2500);\n        toastMsg.className = toastMsg.className.replace('show', '');\n      }\n    }\n  }\n\n  errorLog(error: ResponseError): void {\n    console.error('path:', error.path);\n    console.error('timestamp:', error.timestamp);\n    console.error('message:', error.message);\n    console.error('messageDetail:', error.messageDetail);\n    console.error('statusCode:', error.statusCode);\n  }\n\n  async wait(ms: number) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  handleError(error: HttpErrorResponse) {\n    return throwError(error);\n  }\n}\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,MAAM;;AAejC,OAAM,MAAOC,aAAa;EACxBC,YAAA,GAAe;EAETC,eAAeA,CACnBC,OAAe,EACfC,YAAqB,EACrBC,KAAqB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAErB,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAACP,OAAO,CAAC;MACjD,IAAIK,QAAQ,EAAE;QACZ,IAAIJ,YAAY,EAAE;UAChBI,QAAQ,CAACG,SAAS,GAAG,gBAAgB;UACrCH,QAAQ,CAACI,WAAW,GAAG,8BAA8B;UACrD,MAAMN,KAAI,CAACO,IAAI,CAAC,IAAI,CAAC;UACrBL,QAAQ,CAACG,SAAS,GAAGH,QAAQ,CAACG,SAAS,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;SAC5D,MAAM;UACLN,QAAQ,CAACG,SAAS,GAAG,gBAAgB;UACrC,IAAIN,KAAK,EAAEU,aAAa,EAAE;YACxBP,QAAQ,CAACI,WAAW,GAClB,+CAA+C,GAC/CP,KAAK,EAAEW,OAAO,GACd,oBAAoB,GACpBX,KAAK,EAAEU,aAAa,GACpB,iBAAiB,GACjBV,KAAK,EAAEY,UAAU;WACpB,MAAM;YACLT,QAAQ,CAACI,WAAW,GAClB,+CAA+C,GAC/CP,KAAK,EAAEW,OAAO,GACd,iBAAiB,GACjBX,KAAK,EAAEY,UAAU;;UAGrB,MAAMX,KAAI,CAACO,IAAI,CAAC,IAAI,CAAC;UACrBL,QAAQ,CAACG,SAAS,GAAGH,QAAQ,CAACG,SAAS,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;;IAE9D;EACH;EAEAI,QAAQA,CAACb,KAAoB;IAC3Bc,OAAO,CAACd,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACe,IAAI,CAAC;IAClCD,OAAO,CAACd,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACgB,SAAS,CAAC;IAC5CF,OAAO,CAACd,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACW,OAAO,CAAC;IACxCG,OAAO,CAACd,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACU,aAAa,CAAC;IACpDI,OAAO,CAACd,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACY,UAAU,CAAC;EAChD;EAEMJ,IAAIA,CAACS,EAAU;IAAA,OAAAf,iBAAA;MACnB,OAAO,IAAIgB,OAAO,CAAEC,OAAO,IAAI;QAC7BC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC;MACzB,CAAC,CAAC;IAAC;EACL;EAEAI,WAAWA,CAACrB,KAAwB;IAClC,OAAON,UAAU,CAACM,KAAK,CAAC;EAC1B;;AAvDWL,aAAa,C;mBAAbA,aAAa;AAAA;AAAbA,aAAa,C;SAAbA,aAAa;EAAA2B,OAAA,EAAb3B,aAAa,CAAA4B,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}